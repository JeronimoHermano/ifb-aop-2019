#ifndef __aspect_ah__
#define __aspect_ah__

#include <iostream>
#include <string>

namespace aloha
{
typedef struct
{
  char user[30];
  char password[20];
} TipoSystem;

//Login
bool login()
{
  FILE *arq = fopen("start.bin", "rb");
  if (!arq)
  {
    puts("Erro na leitura de start.bin");
    exit(0);
  }
  TipoSystem sistema;
  fread(&sistema, sizeof(TipoSystem), 1, arq);
  fclose(arq);
  // return sistema;
  std::string usuario, senha;
  std::cout << "USUARIO: ";
  std::cin >> usuario;
  std::cout << "SENHA: ";
  std::cin >> senha;

  if (usuario.compare(std::string(sistema.user)) == 0 && senha.compare(std::string(sistema.password)) == 0)
  {
    puts("SENHA CERTA");
    return true;
  }
  return false;
}
} // namespace aloha

aspect AspectoSeguranca{
  //pointcut pesquisa
  // pointcut pesquisa() = "%pesquisar_...::%(...)";
  //pointcut pesquisa() = "% pesquisar_Idades::%(...)";

  //advice execution(pesquisa()) && result(resp) : after(bool *resp)
  advice execution("bool pesquisar_...(...)") && result(respo) : after(bool respo){
                                                     getchar();
bool resp = false;
if (!respo)
{
  puts("\n Não foi encontrado nenhum registro!"); /*Não encontrou nada*/
}

Mensagem("\n\n Pressione <Enter> para continuar .  .  ."); /*No fim da listagem*/
}

advice execution("void Listar()") : before()
{
  //std::cout << "VOU LISTAR" << std::endl;
  puts("OI");
}

//decriptografar antes de abrir
advice execution("void Inic()") : before()
{
  //std::cout << "Pedir senha, decriptografar arquivo Dados.crypt criando arquivo Dados.dat" << std::endl;
  while (!aloha::login())
  {
    std::cout << "Usuario ou Senha errado" << std::endl;
  }
}

//criptografar ao final (se falhar a execução pode dar merda, melhor pedir senha para entrar no programa e criptografar a senha)
advice execution("int main(...)") : after()
{
  std::cout << "Criptografar arquivo Dados.dat criando Dados.crypt e apagando o anterior" << std::endl;
}

//Conferir dados da Pessoa
advice execution("void Ler_Pessoa(...)") && args(x) : after(Pessoa * x)
{
  std::cout << "Verificando dados..." << std::endl;
  bool errado = false;
  if (x->idade <= 0)
  {
    std::cout << "Idade não pode ser menor que 0" << std::endl;
    errado = true;
  }
  if (x->salario <= 0.0)
  {
    std::cout << "Salario não pode ser menor que 0.0" << std::endl;
    errado = true;
  }
  if (errado)
  {
    Ler_Pessoa(x);
  }
}
}
;

#endif
